"use strict";

function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread(); }

function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance"); }

function _iterableToArray(iter) { if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter); }

function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } }

// simple functions
// import {gId, qSel, createEl, getVal} from './base';
//create all static vars
var films_archive = [];
var films_container = gId('films-list');
var add_film = gId('add-film-form');
var new_film_title = qSel('input[name="film-title"]');
var new_film_year = qSel('input[name="film-year"]'); //adding max and min attributes to the year of the film

new_film_year.setAttribute('max', new Date().getFullYear());
new_film_year.setAttribute('min', 1888);

var createFilm = function createFilm(obj) {
    //creating new film components
    var new_film_container = createEl('div', 'film-container');
    var new_film_full_title = createEl('div', 'film-full-title');
    var new_film_stars_container = createEl('div', 'stars-container');
    var new_film_stars = new Array(5);

    for (var i = 0; i < new_film_stars.length; i++) {
        new_film_stars[i] = createEl('div', 'star-item');
        new_film_stars[i].setAttribute('data-rating', i + 1);
    } //fulling components with values


    var new_film_full_title_string = "".concat(obj.title, " (").concat(obj.year, ")");

    if (new_film_full_title_string.length > 25) {
        new_film_full_title.textContent = "".concat(new_film_full_title_string.slice(0, 25), "...");
    } else new_film_full_title.textContent = new_film_full_title_string; //adding listeners to rate stars


    new_film_stars.forEach(function (star, index) {
        if (index < obj.rate - 1) {
            star.classList.add('active');
        } else if (index === obj.rate - 1) {
            star.classList.add('active', 'current-active');
        }

        var clickStar = function clickStar() {
            //updating new value of rate
            obj.rate === index + 1 ? obj.rate = 0 : obj.rate = index + 1; // refresh films rendering !!!!!!!!!!!!!!!!! MUTATE ORIGINAL ARRAY (there we can mutate coz there is no nosort rendering)!!!!!!!

            films_archive.sort(function (a, b) {
                if (+a.rate !== +b.rate) {
                    return +b.rate - +a.rate;
                } else if (a.title > b.title) {
                    return 1;
                } else return -1;
            });
            localStorage.setItem('films', JSON.stringify(films_archive));
            renderFunc();
        };

        var addStar = function addStar() {
            if (index >= obj.rate - 1) {
                new_film_stars.forEach(function (str, ind) {
                    if (ind <= index) {
                        str.classList.add('active');
                    }
                });
            } else {
                new_film_stars.forEach(function (str, ind) {
                    if (ind > index) {
                        str.classList.remove('active');
                    }
                });
            }
        };

        var removeStar = function removeStar() {
            new_film_stars.forEach(function (str, ind) {
                if (ind < obj.rate - 1) {
                    str.classList.add('active');
                } else if (ind > obj.rate - 1) {
                    str.classList.remove('active');
                } else if (ind === obj.rate - 1) {
                    str.classList.add('active', 'current-active');
                }
            });
        };

        star.addEventListener('click', clickStar);
        star.addEventListener('mouseover', addStar);
        star.addEventListener('mouseout', removeStar);
    }); //creating rate block

    new_film_stars.forEach(function (star) {
        return new_film_stars_container.appendChild(star);
    }); //creating new film block

    [new_film_full_title, new_film_stars_container].forEach(function (child) {
        return new_film_container.appendChild(child);
    }); //inserting new film in page

    films_container.appendChild(new_film_container);
}; // imitation of rendering


var renderFunc = function renderFunc() {
    [new_film_title, new_film_year].forEach(function (input) {
        return input.value = '';
    });
    films_container.innerHTML = '';
    var memory_archive = JSON.parse(localStorage.getItem('films'));

    if (memory_archive) {
        films_archive = _toConsumableArray(memory_archive);
    }

    films_archive.forEach(function (film) {
        return createFilm(film);
    });
    new_film_title.focus();
}; //add film func


var addFilm = function addFilm(e) {
    e.preventDefault();
    var new_title = getVal(new_film_title).toLowerCase().split(' ').map(function (word) {
        return word.length > 2 ? word.charAt(0).toUpperCase() + word.slice(1) : word;
    });
    var newFilm = {
        id: films_archive.length + 1,
        title: new_title.join(' '),
        year: getVal(new_film_year),
        rate: 0
    };
    films_archive.push(newFilm);
    localStorage.setItem('films', JSON.stringify(films_archive));
    renderFunc();
};

window.addEventListener('load', renderFunc);
add_film.addEventListener('submit', addFilm);